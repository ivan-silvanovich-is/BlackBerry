# Generated by Django 4.1.2 on 2022-10-14 08:41

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    replaces = [('product', '0001_initial'), ('product', '0002_initial'), ('product', '0003_remove_product_product_product_discount_between_0_and_99_and_more'), ('product', '0004_product_product_product_discount_between_0_and_99'), ('product', '0005_alter_color_hex_alter_coupon_discount_and_more')]

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='Название')),
                ('slug', models.SlugField(unique=True, verbose_name='Слаг')),
                ('logo', models.CharField(max_length=100, unique=True, verbose_name='Лого')),
                ('parent_category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='child_categories', to='product.category', verbose_name='Родительская категория')),
            ],
            options={
                'verbose_name': 'Категория',
                'verbose_name_plural': 'Категории',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Color',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True, verbose_name='Название')),
                ('slug', models.SlugField(unique=True, verbose_name='Слаг')),
                ('hex', models.CharField(max_length=7, verbose_name='Код')),
            ],
            options={
                'verbose_name': 'Цвет товара',
                'verbose_name_plural': 'Цвета товаров',
                'ordering': ['hex'],
            },
        ),
        migrations.CreateModel(
            name='Manufacturer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='Название')),
                ('slug', models.SlugField(unique=True, verbose_name='Слаг')),
                ('logo', models.CharField(blank=True, max_length=100, null=True, unique=True, verbose_name='Логотип')),
                ('description', models.CharField(blank=True, max_length=200, null=True, verbose_name='Описание')),
                ('country', models.CharField(max_length=50, verbose_name='Страна')),
                ('address', models.CharField(blank=True, max_length=255, null=True, verbose_name='Адрес')),
            ],
            options={
                'verbose_name': 'Производитель',
                'verbose_name_plural': 'Производители',
                'ordering': ['name'],
                'get_latest_by': '-created_at',
            },
        ),
        migrations.CreateModel(
            name='Material',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Название')),
                ('slug', models.SlugField(unique=True, verbose_name='Слаг')),
            ],
            options={
                'verbose_name': 'Материал товара',
                'verbose_name_plural': 'Материалы товаров',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('gender', models.CharField(choices=[('m', 'Мужской'), ('f', 'Женский')], max_length=1, verbose_name='Пол')),
                ('is_new', models.BooleanField(default=True, verbose_name='Новинка')),
                ('title', models.CharField(max_length=100, unique=True, verbose_name='Название')),
                ('slug', models.SlugField(unique=True, verbose_name='Слаг')),
                ('description', models.TextField(verbose_name='Описание')),
                ('price', models.IntegerField(verbose_name='Цена')),
                ('discount', models.IntegerField(default=0, verbose_name='Скидка %')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='product.category', verbose_name='Категория')),
                ('default_color', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='product.color', verbose_name='Цвет по умолчанию')),
                ('manufacturer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='product.manufacturer', verbose_name='Производитель')),
            ],
            options={
                'verbose_name': 'Товар',
                'verbose_name_plural': 'Товары',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Size',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=3, unique=True, verbose_name='Размер')),
            ],
            options={
                'verbose_name': 'Размер товара',
                'verbose_name_plural': 'Размеры товаров',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('rating', models.IntegerField(verbose_name='Оценка')),
                ('text', models.TextField(max_length=1000, verbose_name='Текст')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='product.product', verbose_name='товар')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Отзыв',
                'verbose_name_plural': 'Отзывы',
                'ordering': ['-product', '-created_at'],
                'get_latest_by': '-created_at',
            },
        ),
        migrations.CreateModel(
            name='ProductMaterial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('part', models.IntegerField(default=100, verbose_name='Содержание %')),
                ('material', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='product.material', verbose_name='Материал')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='product.product', verbose_name='Товар')),
            ],
        ),
        migrations.CreateModel(
            name='ProductDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('quantity', models.IntegerField(default=0, verbose_name='Количество')),
                ('color', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='product.color', verbose_name='Цвет товара')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='details', to='product.product', verbose_name='Название товара')),
                ('size', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='product.size', verbose_name='Размер товара')),
            ],
            options={
                'verbose_name': 'Детали товара',
                'verbose_name_plural': 'Детали товаров',
                'ordering': ['-product'],
                'get_latest_by': '-created_at',
            },
        ),
        migrations.AddField(
            model_name='material',
            name='products',
            field=models.ManyToManyField(related_name='materials', through='product.ProductMaterial', to='product.product', verbose_name='Товары'),
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Название')),
                ('color', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='product.color', verbose_name='Цвет')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='product.product', verbose_name='товар')),
            ],
            options={
                'verbose_name': 'Фотография товара',
                'verbose_name_plural': 'Фотографии товаров',
                'ordering': ['-product', 'color'],
                'get_latest_by': '-created_at',
            },
        ),
        migrations.CreateModel(
            name='Coupon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('is_active', models.BooleanField(default=False, verbose_name='Активный')),
                ('name', models.CharField(max_length=20, unique=True, verbose_name='Название')),
                ('slug', models.SlugField(unique=True, verbose_name='Слаг')),
                ('discount', models.IntegerField(verbose_name='Скидка %')),
                ('valid_until', models.DateTimeField(verbose_name='Дата истечения')),
                ('use_limit', models.IntegerField(blank=True, null=True, verbose_name='Лимит использований')),
                ('used_amount', models.IntegerField(default=0, verbose_name='Количество использований')),
                ('categories', models.ManyToManyField(to='product.category', verbose_name='Категории')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Купон',
                'verbose_name_plural': 'Купоны',
                'ordering': ['-is_active', '-valid_until'],
                'get_latest_by': '-created_at',
            },
        ),
        migrations.AddConstraint(
            model_name='review',
            constraint=models.CheckConstraint(check=models.Q(('rating__range', (0, 10))), name='product_review_rating_between_0_and_10'),
        ),
        migrations.AlterUniqueTogether(
            name='review',
            unique_together={('user', 'product')},
        ),
        migrations.AddConstraint(
            model_name='productmaterial',
            constraint=models.CheckConstraint(check=models.Q(('part__range', (1, 100))), name='product_productmaterial_part_between_1_and_100'),
        ),
        migrations.AlterUniqueTogether(
            name='productmaterial',
            unique_together={('material', 'product')},
        ),
        migrations.AlterUniqueTogether(
            name='productdetails',
            unique_together={('product', 'color', 'size')},
        ),
        migrations.AddConstraint(
            model_name='product',
            constraint=models.CheckConstraint(check=models.Q(('discount__range', (0, 99))), name='product_product_discount_between_0_and_99'),
        ),
        migrations.AddConstraint(
            model_name='coupon',
            constraint=models.CheckConstraint(check=models.Q(('discount__range', (0, 99))), name='product_coupon_discount_between_0_and_99'),
        ),
        migrations.AddConstraint(
            model_name='coupon',
            constraint=models.CheckConstraint(check=models.Q(('use_limit__isnull', True), ('use_limit__gt', 0), _connector='OR'), name='product_coupon_use_limit_is_null_or_greater_then_0'),
        ),
        migrations.AddConstraint(
            model_name='coupon',
            constraint=models.CheckConstraint(check=models.Q(('used_amount__gte', 0)), name='product_coupon_used_amount_greater_then_0_or_equal'),
        ),
        migrations.AddConstraint(
            model_name='coupon',
            constraint=models.CheckConstraint(check=models.Q(('use_limit__isnull', True), ('use_limit__gte', models.F('used_amount')), _connector='OR'), name='product_coupon_used_amount_less_then_use_limit_or_equal'),
        ),
        migrations.RemoveConstraint(
            model_name='product',
            name='product_product_discount_between_0_and_99',
        ),
        migrations.AlterField(
            model_name='product',
            name='discount',
            field=models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99)], verbose_name='Скидка %'),
        ),
        migrations.AddConstraint(
            model_name='product',
            constraint=models.CheckConstraint(check=models.Q(('discount__range', (0, 99))), name='product_product_discount_between_0_and_99'),
        ),
        migrations.AlterField(
            model_name='color',
            name='hex',
            field=models.CharField(max_length=7, unique=True, verbose_name='Код'),
        ),
        migrations.AlterField(
            model_name='coupon',
            name='discount',
            field=models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99)], verbose_name='Скидка %'),
        ),
        migrations.AlterField(
            model_name='coupon',
            name='use_limit',
            field=models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Лимит использований'),
        ),
        migrations.AlterField(
            model_name='coupon',
            name='used_amount',
            field=models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Количество использований'),
        ),
        migrations.AlterField(
            model_name='productdetails',
            name='quantity',
            field=models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Количество'),
        ),
        migrations.AlterField(
            model_name='productmaterial',
            name='part',
            field=models.IntegerField(default=100, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Содержание %'),
        ),
        migrations.AlterField(
            model_name='review',
            name='rating',
            field=models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='Оценка'),
        ),
        migrations.AddConstraint(
            model_name='productdetails',
            constraint=models.CheckConstraint(check=models.Q(('quantity__gte', 0)), name='product_productdetails_quantity_greater_then_0_or_equal'),
        ),
    ]
