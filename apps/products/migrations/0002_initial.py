# Generated by Django 4.1.2 on 2023-02-04 13:08

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('products', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='review',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь'),
        ),
        migrations.AddField(
            model_name='productmaterial',
            name='material',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='products.material', verbose_name='Материал'),
        ),
        migrations.AddField(
            model_name='productmaterial',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.product', verbose_name='Товар'),
        ),
        migrations.AddField(
            model_name='productdetails',
            name='color',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='products.color', verbose_name='Цвет товара'),
        ),
        migrations.AddField(
            model_name='productdetails',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='details', to='products.product', verbose_name='Название товара'),
        ),
        migrations.AddField(
            model_name='productdetails',
            name='size',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='products.size', verbose_name='Размер товара'),
        ),
        migrations.AddField(
            model_name='product',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='products.category', verbose_name='Категория'),
        ),
        migrations.AddField(
            model_name='product',
            name='default_color',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='products.color', verbose_name='Цвет по умолчанию'),
        ),
        migrations.AddField(
            model_name='product',
            name='manufacturer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='products.manufacturer', verbose_name='Производитель'),
        ),
        migrations.AddField(
            model_name='material',
            name='products',
            field=models.ManyToManyField(related_name='materials', through='products.ProductMaterial', to='products.product', verbose_name='Товары'),
        ),
        migrations.AddField(
            model_name='image',
            name='color',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='products.color', verbose_name='Цвет'),
        ),
        migrations.AddField(
            model_name='image',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='products.product', verbose_name='товар'),
        ),
        migrations.AddField(
            model_name='coupon',
            name='categories',
            field=models.ManyToManyField(to='products.category', verbose_name='Категории'),
        ),
        migrations.AddField(
            model_name='coupon',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь'),
        ),
        migrations.AddField(
            model_name='category',
            name='parent_category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='child_categories', to='products.category', verbose_name='Родительская категория'),
        ),
        migrations.AddConstraint(
            model_name='review',
            constraint=models.CheckConstraint(check=models.Q(('rating__range', (0, 10))), name='products_review_rating_between_0_and_10'),
        ),
        migrations.AlterUniqueTogether(
            name='review',
            unique_together={('user', 'product')},
        ),
        migrations.AddConstraint(
            model_name='productmaterial',
            constraint=models.CheckConstraint(check=models.Q(('part__range', (1, 100))), name='products_productmaterial_part_between_1_and_100'),
        ),
        migrations.AlterUniqueTogether(
            name='productmaterial',
            unique_together={('material', 'product')},
        ),
        migrations.AddConstraint(
            model_name='productdetails',
            constraint=models.CheckConstraint(check=models.Q(('quantity__gte', 0)), name='products_productdetails_quantity_greater_then_0_or_equal'),
        ),
        migrations.AlterUniqueTogether(
            name='productdetails',
            unique_together={('product', 'color', 'size')},
        ),
        migrations.AddConstraint(
            model_name='product',
            constraint=models.CheckConstraint(check=models.Q(('discount__range', (0, 99))), name='products_product_discount_between_0_and_99'),
        ),
        migrations.AddConstraint(
            model_name='coupon',
            constraint=models.CheckConstraint(check=models.Q(('discount__range', (0, 99))), name='products_coupon_discount_between_0_and_99'),
        ),
        migrations.AddConstraint(
            model_name='coupon',
            constraint=models.CheckConstraint(check=models.Q(('use_limit__isnull', True), ('use_limit__gt', 0), _connector='OR'), name='products_coupon_use_limit_is_null_or_greater_then_0'),
        ),
        migrations.AddConstraint(
            model_name='coupon',
            constraint=models.CheckConstraint(check=models.Q(('used_amount__gte', 0)), name='products_coupon_used_amount_greater_then_0_or_equal'),
        ),
        migrations.AddConstraint(
            model_name='coupon',
            constraint=models.CheckConstraint(check=models.Q(('use_limit__isnull', True), ('use_limit__gte', models.F('used_amount')), _connector='OR'), name='products_coupon_used_amount_less_then_use_limit_or_equal'),
        ),
    ]
